      SUBROUTINE DSUB2 (NEQ, T, Y, YDOT)

C     NICHEMAPR: SOFTWARE FOR BIOPHYSICAL MECHANISTIC NICHE MODELLING

C     COPYRIGHT (C) 2018 MICHAEL R. KEARNEY AND WARREN P. PORTER

C     THIS PROGRAM IS FREE SOFTWARE: YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C     IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C     THE FREE SOFTWARE FOUNDATION, EITHER VERSION 3 OF THE LICENSE, OR (AT
C      YOUR OPTION) ANY LATER VERSION.

C     THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C     WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C     MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C     GENERAL PUBLIC LICENSE FOR MORE DETAILS.

C     YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C     ALONG WITH THIS PROGRAM. IF NOT, SEE HTTP://WWW.GNU.ORG/LICENSES/.

C     THE CALL TO THIS SUBROUTINE FROM THE GEAR INTEGRATOR REFERS TO THIS
C     SUBROUTINE AS SUBROUTINE F, I.E. CALL F(NEQ, TN, Y, SAVF)

      IMPLICIT NONE

      EXTERNAL FUN,FUNSKIN

C     THIS PROGRAM USES THE SOLUTION FOR UNIFORM INTERNAL HEAT GENERATION
C     FOR ALL GEOMETRIES, WHICH YIELDS A PARABOLIC TEMPERATURE PROFILE INTERNALLY.
C     THERE IS NO BREAKING THE ANIMAL INTO INTERNAL NODES ANY MORE.
C     AVERAGE INTERNAL TEMPERATURE IS THE AVERAGE OVER THE INTEGRAL FROM CORE TO SKIN.

C     PROGRAM FOR LSODE, AN ADAMS PREDICTOR CORRECTOR (GEAR) INTEGRATOR.
C     THIS SUBROUTINE CONTAINS TIME DEPENDENT EQUATIONS
C     (ALGEBRAIC & DERIVATIVES) USED BY LSODE.
C     DSUB IS WHERE THE INTEGRATOR COMES TO GET ALL VALUES AS A
C     FUNCTION OF TIME (OR OTHER INDEPENDENT VARIABLE).  EACH
C     STEP FORWARD IN TIME REQUIRES FOUR DIFFERENT TIMES WHEN ANIMAL
C     (AND ENVIRONMENT) TIME DEPENDENT VARIABLES MUST BE OBTAINED
C     OR COMPUTED.  THE INTEGRATOR TREATS Y'S AS VARIABLES AND
C     YDOT'S AS FIRST ORDER DERIVATIVES.  SECOND ORDER OR HIGHER
C     DERIVATIVES CAN BE EXPRESSED AS FIRST ORDER DERIVATIVES
C     AS ILLUSTRATED ON P. 134 OF FORSYTHE, MALCOLM & MOLER'S 1977
C     TEXT ON COMPUTER METHODS FOR MATHEMATICAL CALCULATIONS.
C     (PRENTICE HALL)

C     NEQ = NUMBER OF EQUATIONS (NODES) FOR ANIMAL
C     T = TIME (MINUTES)
C     Y = TCORE (C)
C     YDOT = DTCORE/DTIME

      DOUBLE PRECISION A1,A2,A3,A4,A4B,A5,A6,ABSAN,ABSMAX,ABSMIN,ABSSB
      DOUBLE PRECISION AEFF,AHEIT,AIND,AIRVOL,AL,ALENTH,ALT,AMASS,ANDENS
      DOUBLE PRECISION AREA,AREF,ASEMAJR,ASIL,ASILN,ASILP,ASQ,AT,ATOT,AV
      DOUBLE PRECISION AWIDTH,BP,BREF,BSEMINR,BSQ,CO2MOL,CONST,CONTDEP
      DOUBLE PRECISION CONTDEPTH,CONTH,CONTHOLE,CONTVOL,CONTW,CONTWET
      DOUBLE PRECISION CONVAR,CP,CPMIN,CREF,CSEMINR,CSQ,CUSTOMGEOM,CUTFA
      DOUBLE PRECISION DEBQMET,DEBQMET_INIT,DELTAR,DENAIR,DEPSUB,DP
      DOUBLE PRECISION DRYFOOD,E,EMISAN,EMISSB,EMISSK,ENARY1,ENARY10
      DOUBLE PRECISION ENARY11,ENARY12,ENARY13,ENARY14,ENARY15,ENARY16
      DOUBLE PRECISION ENARY17,ENARY18,ENARY19,ENARY2,ENARY20,ENARY21
      DOUBLE PRECISION ENARY22,ENARY23,ENARY24,ENARY25,ENARY26,ENARY27
      DOUBLE PRECISION ENARY28,ENARY29,ENARY3,ENARY30,ENARY31,ENARY32
      DOUBLE PRECISION ENARY33,ENARY34,ENARY35,ENARY36,ENARY37,ENARY38
      DOUBLE PRECISION ENARY39,ENARY4,ENARY40,ENARY41,ENARY42,ENARY43
      DOUBLE PRECISION ENARY44,ENARY45,ENARY46,ENARY47,ENARY48,ENARY5
      DOUBLE PRECISION ENARY6,ENARY7,ENARY8,ENARY9,ENBERR,ESAT,EXTREF
      DOUBLE PRECISION F12,F13,F14,F15,F16,F21,F23,F24,F25,F26,F31,F32
      DOUBLE PRECISION F41,F42,F51,F52,F61,FAECES,FATCOND,FATOBJ,FATOSB
      DOUBLE PRECISION FATOSK,FLSHCOND,FLUID,FUN,G,GEVAP,GH2OMET
      DOUBLE PRECISION GH2OMET_INIT,GMASS,GN,H2O_BALPAST,HC,HD,HR,HTOVPR
      DOUBLE PRECISION J,KTC,MASSLEFT,MLO2,MLO2_INIT,MR_1,MR_2,MR_3
      DOUBLE PRECISION NWASTE,O2MAX,O2MIN,PCTDIF,PCTEYE,PEYES,PHI,PHIMAX
      DOUBLE PRECISION PHIMIN,PI,PTCOND,PTCOND_ORIG,QCOND,QCONV,QGENET
      DOUBLE PRECISION QIN,QIRIN,QIROUT,QMETAB,QOUT,QRESP,QSEVAP,QSOL
      DOUBLE PRECISION QSOLAR,QSOLR,QST,R,R1,R2,REFTOL,RELHUM,RFLESH,RH
      DOUBLE PRECISION RHO1_3,RHREF,RHUM,RINSUL,RQ,RW,S2,SHADE,SHP,SIDEX
      DOUBLE PRECISION SIG,SKINT,SKINW,SPHEAT,SUBTK,T,TA,TALOC,TANNUL
      DOUBLE PRECISION TAVE,TB,TBASK,TC,TCINIT,TCPAST,TDIGPR,TEMERGE
      DOUBLE PRECISION TESTX,TI,TIME,TLUNG,TMAXPR,TMINPR,TOBJ,TOTLEN
      DOUBLE PRECISION TPAST,TPREF,TPRINT,TQSOL,TR,TRAD,TRANS1,TRANSAR
      DOUBLE PRECISION TREF,TSKIN,TSKY,TSKYC,TSUB,TSUBST,TVINC,TVIR
      DOUBLE PRECISION TWING,TYM,VAR,VD,VDAIR,VDSURF,VEL,VLOC,VOL
      DOUBLE PRECISION VOLUMELEFT,VREF,WB,WC,WCMIN,WCUT,WEVAP,WEYES
      DOUBLE PRECISION WQSOL,WRESP,WTRPOT,X,X1,X2,Y,YDOT,Z,ZBRENT,ZEN


      INTEGER CONTONLY,CONTYPE,DEB1,GEOMETRY,IDAY,IHOUR,IT,ITYM,JP,JTYM
      INTEGER LIVE,MICRO,NEQ,NM,NODNUM,POND,SCENAR,WETMOD,WINGCALC
      INTEGER WINGMOD
      
      CHARACTER*1 TRANIN
      LOGICAL SUCCES

      DIMENSION CUSTOMGEOM(8),DEBQMET(24),DRYFOOD(24),ENARY1(25)
      DIMENSION ENARY10(25),ENARY11(25),ENARY12(25),ENARY13(25)
      DIMENSION ENARY14(25),ENARY15(25),ENARY16(25),ENARY17(25)
      DIMENSION ENARY18(25),ENARY19(25),ENARY2(25),ENARY20(25)
      DIMENSION ENARY21(25),ENARY22(25),ENARY23(25),ENARY24(25)
      DIMENSION ENARY25(25),ENARY26(25),ENARY27(25),ENARY28(25)
      DIMENSION ENARY29(25),ENARY3(25),ENARY30(25),ENARY31(25)
      DIMENSION ENARY32(25),ENARY33(25),ENARY34(25),ENARY35(25)
      DIMENSION ENARY36(25),ENARY37(25),ENARY38(25),ENARY39(25)
      DIMENSION ENARY4(25),ENARY40(25),ENARY41(25),ENARY42(25)
      DIMENSION ENARY43(25),ENARY44(25),ENARY45(25),ENARY46(25)
      DIMENSION ENARY47(25),ENARY48(25),ENARY5(25),ENARY6(25)
      DIMENSION ENARY7(25),ENARY8(25),ENARY9(25),FAECES(24)
      DIMENSION GH2OMET(24),MLO2(24),NWASTE(24),QSOL(25),RH(25)
      DIMENSION RHREF(25),SHP(3),TALOC(25),TI(25),TIME(25),TRANSAR(5,25)
      DIMENSION TREF(25),TSKYC(25),TSUB(25),VLOC(25),VREF(25),Y(10)
      DIMENSION YDOT(10),Z(25)

      COMMON/ANPARMS/RINSUL,R1,AREA,VOL,FATCOND
      COMMON/BEHAV2/GEOMETRY,NODNUM,CUSTOMGEOM,SHP
      COMMON/CONT/CONTH,CONTW,CONTVOL,CONTDEP,CONTHOLE,CONTWET,WETMOD,
     & CONTONLY,CONTYPE
      COMMON/CONTDEPTH/CONTDEPTH
      COMMON/DAYITR/IDAY
      COMMON/DEBRESP/MLO2,GH2OMET,DEBQMET,MLO2_INIT,GH2OMET_INIT,
     & DEBQMET_INIT,DRYFOOD,FAECES,NWASTE
      COMMON/DIMENS/ALENTH,AWIDTH,AHEIT
      COMMON/DSUB1/ENARY1,ENARY2,ENARY3,ENARY4,ENARY9,ENARY10,ENARY11,
     & ENARY12,ENARY17,ENARY18,ENARY19,ENARY20,ENARY21,ENARY22,ENARY23,
     & ENARY24,ENARY25,ENARY26,ENARY27,ENARY28,ENARY45,ENARY46,ENARY47,
     & ENARY48
      COMMON/DSUB4/AIND,VAR
      COMMON/ELLIPS/ASEMAJR,BSEMINR,CSEMINR
      COMMON/ENVAR1/QSOL,RH,TSKYC,TIME,TALOC,TREF,RHREF
      COMMON/ENVAR2/TSUB,VREF,Z,TANNUL,VLOC
      COMMON/FUN1/QSOLAR,QIRIN,QMETAB,QRESP,QSEVAP,QIROUT,QCONV,QCOND
      COMMON/FUN2/AMASS,RELHUM,ATOT,FATOSK,FATOSB,EMISAN,SIG,FLSHCOND
      COMMON/FUN3/AL,TA,VEL,PTCOND,SUBTK,DEPSUB,TSUBST,PTCOND_ORIG
      COMMON/FUN4/TSKIN,R,WEVAP,TR,ALT,BP,H2O_BALPAST
      COMMON/FUN5/WC,ZEN,PCTDIF,ABSSB,ABSAN,ASILN,FATOBJ,NM
      COMMON/FUN6/SPHEAT,ABSMAX,ABSMIN,O2MAX,O2MIN,LIVE
      COMMON/OUTSUB/IT
      COMMON/PONDTEST/POND
      COMMON/REVAP1/TLUNG,DELTAR,EXTREF,RQ,MR_1,MR_2,MR_3,DEB1
      COMMON/REVAP2/GEVAP,AIRVOL,CO2MOL
      COMMON/SCENARIO/SCENAR
      COMMON/TPREFR/TMAXPR,TMINPR,TDIGPR,TPREF,TBASK,TEMERGE
      COMMON/TRANINIT/TRANIN
      COMMON/TRANS/JP
      COMMON/TRANSIENT1/TCINIT,TRANSAR
      COMMON/TREG/TC
      COMMON/USROP2/ENBERR,TPRINT
      COMMON/WCOND/TOTLEN,AV,AT
      COMMON/WDSUB1/ANDENS,ASILP,EMISSB,EMISSK,FLUID,G,IHOUR
      COMMON/WDSUB2/QSOLR,TOBJ,TSKY,MICRO
      COMMON/WINGFUN/RHO1_3,TRANS1,AREF,BREF,CREF,PHI,F21,F31,F41,F51,
     & SIDEX,WQSOL,PHIMIN,PHIMAX,TWING,F12,F32,F42,F52,F61,TQSOL,A1,A2,
     & A3,A4,A4B,A5,A6,F13,F14,F15,F16,F23,F24,F25,F26,WINGCALC,WINGMOD
      COMMON/WSOLAR/ASIL,SHADE
      COMMON/DSUB3/ENARY5,ENARY6,ENARY7,ENARY8,ENARY13,ENARY14,ENARY15,
     & ENARY16,ENARY29,ENARY30,ENARY31,ENARY32,ENARY33,ENARY34,ENARY35,
     & ENARY36,ENARY37,ENARY38,ENARY39,ENARY40,ENARY41,ENARY42,ENARY43,
     & ENARY44
      COMMON/EVAP1/PCTEYE,WEYES,WRESP,WCUT,AEFF,CUTFA,HD,PEYES,SKINW,
     & SKINT,HC,CONVAR

      DATA TI/0.,60.,120.,180.,240.,300.,360.,420.,480.,540.,600.,660.,
     &720.,780.,840.,900.,960.,1020.,1080.,1140.,1200.,1260.,1320.,
     &1380.,1440./

C     GRAMS OF MASS
      GMASS = AMASS*1000.
      RFLESH = R1
      PI = 3.14159265
      VOLUMELEFT=VOL
      MASSLEFT=AMASS
      ASQ=0.
      BSQ=0.
      CSQ=0.
      TPAST = T
      QIN=0.

C     TIME DEPENDENT TEMPERATURE OR HEAT GEN./UNIT VOLUME
      IF((TRANIN .EQ. 'N') .OR. (TRANIN .EQ. 'N'))THEN
       TC=TCINIT
      ELSE
       TC=Y(1)
      ENDIF
C     GUESS FOR CORE TEMPERATURE
C     TC = X
      IHOUR = INT((T/60.)) + 1
      IF(T.GT.0.)THEN
C      IF TIME > ), THEN DO SOMETHING.
C      MICROMET INPUT
C      GET HEAT FLUXES FOR ENERGY BALANCE EQUATION FOR NEXT TIME
C      INTERPOLATING VALUES OF DRIVING VARIABLES FOR
C      INTERMEDIATE TIME

C      CALCULATING ENVIRONMENTAL CONDITIONS FOR THE
C      NEXT TIME (INCREMENT), T, INTO THE FUTURE AS SPECIFIED BY THE INTEGRATOR.
C      INTEGRATOR IS RUNNING USING ENVIRONMENTAL CONDITIONS DETERMINED BY
C      STEADY STATE SOLUTIONS OF THE ANIMAL'S ENERGETICS.
       TYM = T
       IF(TYM.GT.1440.)THEN
        TYM = 1440.
       ENDIF
C      DOING TABLE LOOK UP TO GET THE ENVIRONMENTAL CONDITIONS AT THE TIME
C      THE INTEGRATOR WANTS TO USE.
       AIND = TYM

       DO 100 ITYM = 2,25
C       SEARCH THE TIMES FOR TIME GREATER THAN CURRENT INTEGRATOR TIME
        IF(AIND.LE. TI(ITYM)) THEN
C        SET THE COUNTER FOR THE TIME VALUE BELOW CURRENT INTEGRATOR TIME
         JTYM=ITYM-1
C        COMPUTE THE LOCATION IN THE INTERVAL BETWEEN HIGHER AND LOWER TIME
         CONST=(TI(JTYM)-AIND)/(TI(JTYM)-TI(ITYM))
C        INTERPOLATE LINEARLY THE DEPENDENT VALUE
         IF(SCENAR .EQ. 1)THEN
          QSOLR =ENARY1(JTYM)-CONST*(ENARY1(JTYM)- ENARY1(ITYM))
          ZEN =(ENARY2(JTYM)*PI/180.)-CONST*((ENARY2(JTYM)*PI/180.
     &    )-(ENARY2(ITYM))*PI/180.)
          TA =ENARY3(JTYM)-CONST*(ENARY3(JTYM)- ENARY3(ITYM))
          VEL =ENARY4(JTYM)-CONST*(ENARY4(JTYM)- ENARY4(ITYM))
          RELHUM =ENARY5(JTYM)-CONST*(ENARY5(JTYM)- ENARY5(ITYM))
          TSUBST =ENARY7(JTYM)-CONST*(ENARY6(JTYM)- ENARY6(ITYM))
          TSKY =ENARY6(JTYM)-CONST*(ENARY7(JTYM)- ENARY7(ITYM))
          SHADE =ENARY8(JTYM)-CONST*(ENARY8(JTYM)- ENARY8(ITYM))
         ENDIF
         IF(SCENAR .EQ. 2)THEN
          QSOLR =ENARY9(JTYM)-CONST*(ENARY9(JTYM)- ENARY9(ITYM))
          ZEN =(ENARY10(JTYM)*PI/180.)-CONST*((ENARY10(JTYM)*PI/180.
     &    )-(ENARY10(ITYM))*PI/180.)
          TA =ENARY11(JTYM)-CONST*(ENARY11(JTYM)- ENARY11(ITYM))
          VEL =ENARY12(JTYM)-CONST*(ENARY12(JTYM)- ENARY12(ITYM))
          RELHUM =ENARY13(JTYM)-CONST*(ENARY13(JTYM)- ENARY13(ITYM))
          TSUBST =ENARY15(JTYM)-CONST*(ENARY14(JTYM)- ENARY14(ITYM))
          TSKY =ENARY14(JTYM)-CONST*(ENARY15(JTYM)- ENARY15(ITYM))
          SHADE =ENARY16(JTYM)-CONST*(ENARY16(JTYM)- ENARY16(ITYM))
         ENDIF
         IF(SCENAR .EQ. 3)THEN
          QSOLR =ENARY17(JTYM)-CONST*(ENARY17(JTYM)- ENARY17(ITYM))
          ZEN =(ENARY18(JTYM)*PI/180.)-CONST*((ENARY18(JTYM)*PI/180.
     &    )-(ENARY18(ITYM))*PI/180.)
          TA =ENARY19(JTYM)-CONST*(ENARY19(JTYM)- ENARY19(ITYM))
          VEL =ENARY20(JTYM)-CONST*(ENARY20(JTYM)- ENARY20(ITYM))
          RELHUM =ENARY21(JTYM)-CONST*(ENARY21(JTYM)- ENARY21(ITYM))
          TSUBST =ENARY23(JTYM)-CONST*(ENARY22(JTYM)- ENARY22(ITYM))
          TSKY =ENARY22(JTYM)-CONST*(ENARY23(JTYM)- ENARY23(ITYM))
          SHADE =ENARY24(JTYM)-CONST*(ENARY24(JTYM)- ENARY24(ITYM))
         ENDIF
         IF(SCENAR .EQ. 4)THEN
          QSOLR =ENARY25(JTYM)-CONST*(ENARY25(JTYM)- ENARY25(ITYM))
          ZEN =(ENARY26(JTYM)*PI/180.)-CONST*((ENARY26(JTYM)*PI/180.
     &    )-(ENARY26(ITYM))*PI/180.)
          TA =ENARY27(JTYM)-CONST*(ENARY27(JTYM)- ENARY27(ITYM))
          VEL =ENARY28(JTYM)-CONST*(ENARY28(JTYM)- ENARY28(ITYM))
          RELHUM =ENARY29(JTYM)-CONST*(ENARY29(JTYM)- ENARY29(ITYM))
          TSUBST =ENARY31(JTYM)-CONST*(ENARY30(JTYM)- ENARY30(ITYM))
          TSKY =ENARY30(JTYM)-CONST*(ENARY31(JTYM)- ENARY31(ITYM))
          SHADE =ENARY32(JTYM)-CONST*(ENARY32(JTYM)- ENARY32(ITYM))
         ENDIF
         IF(SCENAR .EQ. 5)THEN
          QSOLR =ENARY33(JTYM)-CONST*(ENARY33(JTYM)- ENARY33(ITYM))
          ZEN =(ENARY34(JTYM)*PI/180.)-CONST*((ENARY34(JTYM)*PI/180.
     &    )-(ENARY34(ITYM))*PI/180.)
          TA =ENARY35(JTYM)-CONST*(ENARY35(JTYM)- ENARY35(ITYM))
          VEL =ENARY36(JTYM)-CONST*(ENARY36(JTYM)- ENARY36(ITYM))
          RELHUM =ENARY37(JTYM)-CONST*(ENARY37(JTYM)- ENARY37(ITYM))
          TSUBST =ENARY39(JTYM)-CONST*(ENARY38(JTYM)- ENARY38(ITYM))
          TSKY =ENARY38(JTYM)-CONST*(ENARY39(JTYM)- ENARY39(ITYM))
          SHADE =ENARY40(JTYM)-CONST*(ENARY40(JTYM)- ENARY40(ITYM))
         ENDIF
         IF(SCENAR .GT. 5)THEN
          QSOLR =ENARY41(JTYM)-CONST*(ENARY41(JTYM)- ENARY41(ITYM))
          ZEN =(ENARY42(JTYM)*PI/180.)-CONST*((ENARY42(JTYM)*PI/180.
     &    )-(ENARY42(ITYM))*PI/180.)
          TA =ENARY43(JTYM)-CONST*(ENARY43(JTYM)- ENARY43(ITYM))
          VEL =ENARY44(JTYM)-CONST*(ENARY44(JTYM)- ENARY44(ITYM))
          RELHUM =ENARY45(JTYM)-CONST*(ENARY45(JTYM)- ENARY45(ITYM))
          TSUBST =ENARY47(JTYM)-CONST*(ENARY46(JTYM)- ENARY46(ITYM))
          TSKY =ENARY46(JTYM)-CONST*(ENARY47(JTYM)- ENARY47(ITYM))
          SHADE =ENARY48(JTYM)-CONST*(ENARY48(JTYM)- ENARY48(ITYM))
         ENDIF
         GO TO 101
        ENDIF
  100  CONTINUE
  101  CONTINUE

C      CHECK THAT TEMPERATURE ISN'T GOING HAYWIRE KEARNEY ADDED THIS DURING THE FROG WORKSHOP 17/9/2012
       IF((TC.LT.-150).OR.(TC.GT.150))THEN
        TC=TA
        Y(1)=TC
       ENDIF
       TR = (TSUBST + TSKY)/2.
       TOBJ = TSUBST
C      INFRARED CALCULATIONS?
C      CHECKING TO SEE IF WATER ENVIRONMENT
       IF (FLUID .EQ. 0.0) THEN
C       AIR ENVIRONMENT.  TSKY & TSUBST STORED AND SET ACCORDING TO BEHAVIORS IN STEADY STATE RUN PRIOR TO THIS.
        CALL GEOM
        CALL RADIN
        CALL SOLAR
       ELSE
C       WATER ENVIRONMENT
        FATOBJ = 0.00
        FATOSK = 0.00
        FATOSB = 0.00
        QIRIN = 0.00
       ENDIF

C      QIN
C      GETTING HEAT FLUXES BASED ON CURRENT TEMPERATURES
C      ONE LUMP MODEL
       QIN = QSOLAR + QIRIN
C      M**3 = KG/(KG/M**3)

C      GETTING SURFACE HEAT FLUXES BASED ON CURRENT SKIN TEMP'S
C      AND GETTING RESP. EVAP LOSS BASED ON CURRENT CORE TEMP
       TC = Y(1)
C      IF(SCENAR .GT. 5)THEN
C      IF((TRANSAR(1,IHOUR).GT.TDIGPR).AND.(TRANSAR(2,IHOUR).LE.TDIGPR
C      &       ))THEN
C      TC=TDIGPR
C      ENDIF
C      ENDIF
       TB=TC
       IF(LIVE.EQ.0)THEN
        QMETAB = 0.
        QRESP = 0.
        QGENET = 0.
        GN = 0.
       ELSE
        IF(TC .GT. 50)THEN
         TB = 50
        ENDIF
        QMETAB = 0.0056*10.**(0.038*(TB)-1.771)*GMASS**.82
C       USING INTEGRATED AVERAGE OF BODY TEMPERATURES FOR FIRST ESTIMATE TO GET QRESP
        TLUNG = (TC + TSKIN)/2.
        CALL RESP
        QGENET = QMETAB-QRESP
        GN = QGENET/VOL
       ENDIF

       IF((GEOMETRY.EQ.1).OR.(GEOMETRY.EQ.3).OR.(GEOMETRY.EQ.5))THEN
C       USE CYLINDER: TC - TSKIN = (GENPV*R^2)/(4*FLSHCOND)
        TSKIN = TC - (GN*RFLESH**2)/(4*FLSHCOND)
        TLUNG = (GN*RFLESH**2)/(8.*FLSHCOND) + TSKIN
       ENDIF
       IF((GEOMETRY.EQ.2).OR.(GEOMETRY.EQ.4))THEN
        ASQ = ASEMAJR**2
        BSQ = BSEMINR**2
        CSQ = CSEMINR**2
        TSKIN = TC - (GN/(2.*FLSHCOND)) * ((ASQ*BSQ*CSQ)/
     &  (ASQ*BSQ+ASQ*CSQ+BSQ*CSQ))
        TLUNG = (GN/(4.*FLSHCOND)) * ((ASQ*BSQ*CSQ)/
     &  (ASQ*BSQ+ASQ*CSQ+BSQ*CSQ)) + TSKIN
       ENDIF

C      CHECKING FOR FLUID TYPE
       IF (FLUID .EQ. 0.00) THEN
C       AIR
        Y(2) = TSKIN
        CALL CONV
        IF(LIVE.EQ.1)THEN
         CALL RESP
        ENDIF
        CALL SEVAP
        CALL RADOUT
        CALL COND
       ELSE
C       WATER
        QSEVAP = 0.00
        WEVAP = 0.0
        QIROUT = 0.00
        QCOND = 0.00
       ENDIF

C      QOUT
C      ONE LUMP MODEL
       QOUT = QCONV + QSEVAP + QIROUT + QRESP + QCOND

C      C/MIN = (J/S)*MIN*(S/MIN)/(KG/M^3*M^3*J/KG-C)
C      INTEGRATOR MULTIPLIES BY NUMBER OF MINUTES:YDOT(N) IN J/MIN
       YDOT(1)=((QIN + QGENET - QOUT)*60.)/(AMASS*SPHEAT)

       TRAD=(QIRIN/(EMISAN*1*CONVAR*SIG))**(1./4.)-273.15
       HTOVPR = 2.5012E+06 - 2.3787E+03 * TA
       TAVE=(TRAD+TSKIN)/2.
       HR=4*EMISAN*SIG*(TAVE+273)**3
C      INITIALIZING FOR SUB. WETAIR2
       WB = 0.0
       DP = 999.
       CALL WETAIR2(TA,WB,RELHUM,DP,BP,E,ESAT,VD,RW,TVIR,TVINC,
     * DENAIR,CP,WTRPOT)
       VDAIR = VD
       RHUM=100.
       CALL WETAIR2(TSKIN,WB,RHUM,DP,BP,E,ESAT,VD,RW,TVIR,TVINC,
     * DENAIR,CP,WTRPOT)
       VDSURF = VD

       IF((GEOMETRY.EQ.4).OR.(GEOMETRY.EQ.2))THEN
        S2=((ASQ*BSQ*CSQ)/(ASQ*BSQ+ASQ*CSQ+BSQ*CSQ))
        J=(1/(AMASS*SPHEAT))*((QSOLAR+QGENET+CONVAR*(((GN*S2)/(2*
     &  FLSHCOND))*(HC+HR)+HC*TA+HR*TRAD)+AEFF*(HD*HTOVPR*VDAIR))+
     &  ((SUBTK*AV)/(ALENTH/2))*((GN*S2)/(2*FLSHCOND)+TSUBST))
       ELSE
        IF(POND.EQ.0)THEN
         R2=(ALENTH/2)**2
         J=(1/(AMASS*SPHEAT))*((QSOLAR+QGENET+CONVAR*(((GN*R2)/(4*
     &   FLSHCOND))*(HC+HR)+HC*TA+HR*TRAD)+AEFF*(HD*HTOVPR*VDAIR))+
     &   ((SUBTK*AV)/0.025)*((GN*R2)/(4*FLSHCOND)+TSUBST))
        ELSE
         R2=(CONTDEP/1000/2)**2
         J=(1/(AMASS*SPHEAT))*((QSOLAR+QGENET+CONVAR*(((GN*R2)/(4*
     &   FLSHCOND))*(HC+HR)+HC*TA+HR*TRAD)+AEFF*(HD*HTOVPR*VDAIR))+
     &   ((SUBTK*AV)/0.025)*((GN*R2)/(4*FLSHCOND)+TSUBST))
        ENDIF
       ENDIF

       IF(POND.EQ.1)THEN
        KTC=(CONVAR*(TC*HC+TC*HR)+AEFF*HD*HTOVPR*VDSURF+TC*((SUBTK*AV)
     &  /0.025))/(AMASS*SPHEAT)
       ELSE
        KTC=(CONVAR*(TC*HC+TC*HR)+AEFF*HD*HTOVPR*VDSURF+TC*((SUBTK*AV)
     &  /(ALENTH/2)))/(AMASS*SPHEAT)
       ENDIF

       YDOT(1)=(J-KTC)*60

C      NOW GET THE SKIN TEMPERATURE WITH ZBRENT
       X1 = -50.
       X2 = 80.

C      GUESSING FOR CORE TEMPERATURE
       X = TA
       CALL ZBRAC(FUNSKIN,X1,X2,SUCCES)
C      INVOKING THE ENERGY BALANCE EQUATION VIA ZBRENT AND FUN

       TESTX = ENBERR
       REFTOL =TESTX
       X = ZBRENT(FUNSKIN,X1,X2,TESTX)
C      OUT COMES THE GUESSED VARIABLE VALUE (X) THAT SATISFIES
C      THE ENERGY BALANCE EQUATION
C      DEPENDENT VARIABLE GUESSED FOR EITHER CORE TEMP. OR METABOLISM
C      GUESS FOR CORE TEMPERATURE
C      TSKIN=TC+0.1
       TSKIN = X
       TLUNG = (TSKIN+TC)/2.
       CALL SEVAP
C      QSTORED (J/S) = KG/M^3* M^3* J/KG-C* C/(MIN*S/MIN)
       QST = AMASS*SPHEAT*YDOT(1)/((T - TPAST)*60.)

C      DEPENDENT VARIABLE GUESSED FOR: CORE TEMP. OR METABOLISM
C      IF (VARGES .EQ. 0.0) THEN
C       CORE TEMPERATURE; METABOLISM FIXED
C       YDOT(1) = (QSOLAR+QIRIN+QMETAB-QSEVAP-QIROUT-
C     * QCONV-QCOND)/WCMIN
C      ELSE
C       HEAT GENERATION RATE/UNIT VOLUME; FIXED CORE TEMP.
C       YDOT(1) = -(QSOLAR+QIRIN-QSEVAP-QIROUT-
C     * QCONV-QCOND)/(AMASS/ANDENS)
C      ENDIF
       TPAST = T

      ELSE
C    ***********************************************************
C      TIME = 0.0:  INITIALIZE

C      CONVERTING TO MINUTES FOR LSODE, BECAUSE ALL HEAT FLUXES
C      IN WATTS (J/S)
       CPMIN = SPHEAT*60.
C      ONE LUMP MODEL
       WCMIN = AMASS*CPMIN

       QSOLR=ENARY1(1)
       ZEN=ENARY2(1)
       TA=ENARY3(1)
       VEL=ENARY4(1)
       RELHUM=ENARY5(1)
       TSUBST=ENARY7(1)
       TSKY=ENARY6(1)
       SHADE=ENARY8(1)

C      DTEMP/DTIME; TORSO TRANSIENT ENERGY BALANCE; ACTUALLY THIS
C      IS ONLY DTEMP/1 MINUTE; DTIME IS DETERMINED BY THE UNITS OF SPECIFIC
C      HEAT AS ILLUSTRATED FOR CPMIN

C      DTEMP/DTIME (YDOT) AND TEMPERATURE PROFILE THROUGH THE BODY
C      STEADY STATE INITIAL VALUES OF CORE (TC) AND SKIN (TO) DONE
       TC = Y(1)
       IF(LIVE.EQ.0)THEN
        QMETAB = 0.
        QRESP = 0.
        QGENET = 0.
        GN = 0.
       ELSE
        IF(TC .GT. 50)THEN
         TB = 50
        ENDIF
        QMETAB = 0.0056*10.**(0.038*(TB)-1.771)*GMASS**.82
C       SCELOPORUS
C       QMETAB = EXP(-10+0.51*LOG(+0.0001)+0.115*GMASS)
C       USING INTEGRATED AVERAGE OF BODY TEMPERATURES FOR FIRST ESTIMATE TO GET QRESP
        TLUNG = (TC + TSKIN)/2.
        CALL RESP
C       HEAT GENERATION PER UNIT VOLUME
        QGENET = QMETAB-QRESP
        GN = QGENET/VOL
       ENDIF

       IF((GEOMETRY.EQ.1).OR.(GEOMETRY.EQ.3).OR.(GEOMETRY.EQ.5))THEN
C       USE CYLINDER: TC - TSKIN = (GENPV*R^2)/(4*FLSHCOND)
        TSKIN = TC - (GN*RFLESH**2)/(4*FLSHCOND)
        TLUNG = (GN*RFLESH**2)/(8.*FLSHCOND) + TSKIN
       ENDIF
       IF((GEOMETRY.EQ.2).OR.(GEOMETRY.EQ.4))THEN
        TSKIN = TC - (GN/(2.*FLSHCOND)) * ((ASQ*BSQ*CSQ)/
     &  (ASQ*BSQ+ASQ*CSQ+BSQ*CSQ))
        TLUNG = (GN/(4.*FLSHCOND)) * ((ASQ*BSQ*CSQ)/
     &  (ASQ*BSQ+ASQ*CSQ+BSQ*CSQ)) + TSKIN
       ENDIF
       TPAST = T
C      END OF CALCULATIONS FOR WHEN TIME > 0.
      ENDIF

      TCPAST = TC
C     WEVAP IS G/S SO CONVERT TO KG/MIN
      MASSLEFT=AMASS-WEVAP/1000.*60.
      IF(MASSLEFT.LE.0.)THEN
       MASSLEFT=0.
       CONTDEPTH=0.
      ELSE
       VOLUMELEFT=(MASSLEFT/ANDENS)
       CONTDEPTH=VOLUMELEFT/(PI*(CONTW/2./100.)**2.)
       CONTDEPTH=CONTDEPTH*1000.
      ENDIF
      CONTDEP=CONTDEPTH
      IF(CONTDEP.LT.0.01)THEN
       CONTDEP=0.01
       SKINW=0.
      ENDIF

200   RETURN
      END

