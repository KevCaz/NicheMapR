% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/onelump_varenv.R
\name{onelump_varenv}
\alias{onelump_varenv}
\title{One-lump Transient Heat Budget for Variable Environment}
\usage{
onelump(t, Tc_init, thresh, AMASS, lometry, Tairf, Tradf, velf, Qsolf, Zenf, ...)
}
\arguments{
\item{t}{= seq(1,3600,60), time intervals (s) at which output is required}

\item{time}{= 1, time (s) at beginning of spline of environmental conditions}

\item{Tc_init}{= 5, initial temperature (degrees C) Organism shape, 0-5, Determines whether standard or custom shapes/surface area/volume relationships are used: 0=plate, 1=cyl, 2=ellips, 3=lizard (desert iguana), 4=frog (leopard frog), 5=custom (see details)}

\item{thresh}{= 29, threshold temperature (degrees C) at which summary statistics are wanted}

\item{AMASS}{= 500, animal mass (g)}

\item{lometry}{= 2, Organism shape, 0-5, Determines whether standard or custom shapes/surface area/volume relationships are used: 0=plate, 1=cyl, 2=ellips, 3=lizard (desert iguana), 4=frog (leopard frog), 5=custom (see parameter 'customallom')}

\item{Tairf}{air temperature function with time, generated by 'approxfun' (degrees C)}

\item{Tradf}{radiant temperature function with time, generated by 'approxfun'(degrees C), averaging ground and sky}

\item{velf}{wind speed function with time, generated by 'approxfun' (m/s)}

\item{Qsolf}{radiation function with time, generated by 'approxfun' (W/m2)}

\item{Zenf}{zenith angle of sun function with time, generated by 'approxfun' (90 is below horizon), degrees}

\item{Flshcond}{= 0.5, Thermal conductivity of flesh (W/mK, range: 0.412-2.8)}

\item{q}{= 0, metabolic heat production rate W/m3}

\item{Spheat}{= 0.85, Specific heat of flesh J/(kg-K)}

\item{EMISAN}{= 0.95, Emissivity of animal (0-1)}

\item{ABS}{= 0.85, solar absorptivity, decimal percent}

\item{customallom}{= c(10.4713,.688,0.425,0.85,3.798,.683,0.694,.743), Custom allometry coefficients. Operates if lometry=5, and consists of 4 pairs of values representing the parameters a and b of a relationship AREA=a*mass^b, where AREA is in cm2 and mass is in g. The first pair are a and b for total surface area, then a and b for ventral area, then for sillhouette area normal to the sun, then sillhouette area perpendicular to the sun}

\item{shape_a}{= 1., Proportionality factor (-) for going from volume to area, keep this 1 (redundant parameter that should be removed)}

\item{shape_b}{= 3, Proportionality factor (-) for going from volume to area, represents ratio of width:height for a plate, length:diameter for cylinder, b axis:a axis for ellipsoid}

\item{shape_c}{= 0.6666666667, Proportionality factor (-) for going from volume to area, represents ratio of length:height for a plate, c axis:a axis for ellipsoid}

\item{posture}{= 'n' pointing normal 'n', parallel 'p' to the sun's rays, or 'b' in between?}

\item{FATOSK}{= 0.4, Configuration factor to sky (-) for infrared calculations}

\item{FATOSB}{= 0.4, Configuration factor to subsrate for infrared calculations}

\item{sub_reflect}{= 0.2, substrate solar reflectivity, decimal percent}

\item{PCTDIF}{= 0.1, proportion of solar energy that is diffuse (rather than direct beam)}

\item{press}{= 101325, air pressure (Pa)}

\item{VTMIN}{= 24, Voluntary thermal minimum, degrees C (lower body temperature for foraging)}
}
\value{
Tc Core temperature (deg C)

Tcf Final (steady state) temperature (deg C), if conditions remained constant indefinately

tau Time constant (s)

dTc Rate of change of core temperature (deg C/s)

abs2 solar absorptivity
}
\description{
Transient, 'one-lump', heat budget for computing rate of change of temperature
under environmental conditions that vary with time, using interpolation functions to
estimate environmental conditions at particular time intervals.
Michael Kearney & Warren Porter developed this R function in July 2014.
}
\examples{
loc="Alice Springs, Australia"
micro<-micro_global(loc=loc) # run the model with default location and settings

metout<-as.data.frame(micro$metout) # above ground microclimatic conditions, min shade
shadmet<-as.data.frame(micro$shadmet) # above ground microclimatic conditions, max shade
soil<-as.data.frame(micro$soil) # soil temperatures, minimum shade
shadsoil<-as.data.frame(micro$shadsoil) # soil temperatures, maximum shade

# append dates
days<-rep(seq(1,12),24)
days<-days[order(days)]
dates<-days+metout$TIME/60/24-1 # dates for hourly output
dates2<-seq(1,12,1) # dates for daily output

metout<-cbind(dates,metout)
soil<-cbind(dates,soil)
shadmet<-cbind(dates,shadmet)
shadsoil<-cbind(dates,shadsoil)

# combine relevant input fields
micro_sun_all<-cbind(metout[,1:5],metout[,8],soil[,4],metout[,13:15],metout[,6])
colnames(micro_sun_all)<-c('dates','JULDAY','TIME','TALOC','TA1.2m','VLOC','TS','ZEN','SOLR','TSKYC','RHLOC')
micro_shd_all<-cbind(shadmet[,1:5],shadmet[,8],shadsoil[,4],shadmet[,13:15],shadmet[,6])
colnames(micro_shd_all)<-c('dates','JULDAY','TIME','TALOC','TA1.2m','VLOC','TS','ZEN','SOLR','TSKYC','RHLOC')

# loop through middle day of each month
juldays=c(15,46,74,105,135,166,196,227,258,288,319,349)
mons=c("January","February","March","April","May","June","July","August","September","October","November","December")

for(i in 1:length(juldays)){
simday=juldays[i]
micro_sun<-subset(micro_sun_all, micro_sun_all$JULDAY==simday)
micro_shd<-subset(micro_shd_all,micro_shd_all$JULDAY==simday)

# use approxfun to create interpolations for the required environmental variables
time<-seq(0,60*24,60) #60 minute intervals from microclimate output
time<-time*60 # minutes to seconds
Qsolfun_sun<- approxfun(time, c(micro_sun[,9],(micro_sun[1,9]+micro_sun[24,9])/2), rule = 2)
Tradfun_sun<- approxfun(time, rowMeans(cbind(c(micro_sun[,7],(micro_sun[1,7]+micro_sun[24,7])/24),c(micro_sun[,10],(micro_sun[1,10]+micro_sun[24,10])/24)),na.rm=TRUE), rule = 2)
Qsolfun_shd<- approxfun(time, c(micro_shd[,9],(micro_shd[1,9]+micro_shd[24,9])/2)*(1-micro$maxshade), rule = 2)
Tradfun_shd<- approxfun(time, rowMeans(cbind(c(micro_shd[,7],(micro_shd[1,7]+micro_shd[24,7])/24),c(micro_shd[,10],(micro_shd[1,10]+micro_shd[24,10])/24)),na.rm=TRUE), rule = 2)
velfun<- approxfun(time, c(micro_sun[,6],(micro_sun[1,6]+micro_sun[24,6])/2), rule = 2)
Tairfun_sun<- approxfun(time, c(micro_sun[,4],(micro_sun[1,4]+micro_sun[24,4])/2), rule = 2)
Tairfun_shd<- approxfun(time, c(micro_shd[,4],(micro_shd[1,4]+micro_shd[24,4])/2), rule = 2)
Zenfun<- approxfun(time, c(micro_sun[,8],90), rule = 2)

# choose full sun environment
Tairfun<-Tairfun_sun
Tradfun<-Tradfun_sun
Qsolfun<-Qsolfun_sun

t=seq(1,3600*24,60) # sequence of times for predictions (1 min intervals)
Tbs<-onelump_varenv(t=t) # run the model

plot(t/3600,Tbs$Tc,type='l',ylim=c(-10,70),ylab='Temperature, deg C',xlab='hour of day', main=paste(loc,mons[i]))
}
}

